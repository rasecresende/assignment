rm(list=ls())

foo <- read.csv("https://tinyurl.com/y2qv82ks")

# Only install the 2 packages below if not already installed
# install.packages("date")
# install.packages("Matching")

library(date)
library(Matching)

# dim(foo)
# 76772    14

names(foo)
#[1] "bank_code"      [2] "bank_name"      [3] "date_of_birth"  
#[4] "gender"         [5] "marital_status" [6]  "education"      
#[7] "occupation"     [8] "postal_code"    [9]  "district_code"  
#[10] "worker"        [11] "capital"       [12] "credit_proposal"
#[13] "status"        [14] "randomid"

# vars 1, 2, and 3 have 17,330, 68,029, and 1108 blanks (""), respectively
# vars 8 and 11 have 13,118 and 14,642 NAs, respectively

# create dummies indicating where the blanks and NAs are.
missing_bank_code <- rep(0, 76772)
missing_bank_name <- rep(0, 76772)
missing_date_of_birth <- rep(0, 76772)
NA_postal_code <- rep(0, 76772)
NA_capital <- rep(0, 76772)
NA_credit_proposal <- rep(0, 76772)

foo <- cbind(foo, missing_bank_code,
             missing_bank_name,
             missing_date_of_birth,
             NA_postal_code,
             NA_capital,
             NA_credit_proposal)

foo$missing_bank_code[which(foo$bank_code == "")] <- 1
foo$missing_bank_name[which(foo$bank_name == "")] <- 1
foo$missing_date_of_birth[which(foo$date_of_birth == "")] <- 1
foo$NA_capital[which(is.na(foo$capital) == TRUE)] <- 1
foo$NA_credit_proposal[which(is.na(foo$credit_proposal) == TRUE)] <- 1
foo$NA_postal_code[which(is.na(foo$postal_code) == TRUE)] <- 1

# change the dates to R-readable format
foo$R_date_of_birth <- as.character(foo[,3])
for(i in 1:length(foo[,3])) {foo$R_date_of_birth[i] <- as.date(foo$R_date_of_birth[i], order = 
"dmy")}
foo$R_date_of_birth <- as.date(as.numeric(foo$R_date_of_birth))

oldest <- which(foo$R_date_of_birth < as.date("1-Jan-1910"))
youngest <- which(foo$R_date_of_birth > as.date("1 Jan 2001"))

foo$oldest <- rep(0, length(foo[,3]))
foo$youngest <- rep(0, length(foo[,3]))
foo$outlier_ages <- rep(0, length(foo[,3]))
foo$oldest[oldest] <- 1
foo$youngest[youngest] <- 1
foo$outlier_ages[c(oldest,youngest)] <- 1

foo$R_date_of_birth[which(is.na(foo$R_date_of_birth) == TRUE)] <- -9999999

# This obs with specific postal code makes no sense
foo <- foo[-which(foo$postal_code == 9151), ]

# To extract only the first digit of postal codes:
foo$postal_code1 <- foo$postal_code%/% 10000
foo$postal_code1[which(is.na(foo$postal_code1) == TRUE)] <- -9999999

# credit_proposal feature engineering
foo$credit_proposal[which(is.na(foo$credit_proposal) == TRUE)] <- 9999999

foo$credit_proposal_0 <- foo$credit_proposal == 0 & (is.na(foo$credit_proposal) == FALSE)
foo$credit_proposal_0to5 <- foo$credit_proposal > 0 & foo$credit_proposal < 5000000 & 
(is.na(foo$credit_proposal) == FALSE)
foo$credit_proposal_5to10 <- foo$credit_proposal >= 5000000 & foo$credit_proposal < 10000000 & 
(is.na(foo$credit_proposal) == FALSE)
foo$credit_proposal_10to20 <- foo$credit_proposal >= 10000000 & foo$credit_proposal < 20000000 & 
(is.na(foo$credit_proposal) == FALSE)
foo$credit_proposal_20up <- foo$credit_proposal >= 20000000 & (is.na(foo$credit_proposal) == 
FALSE)

foo$credit_proposal_transformed <-
  1*foo$credit_proposal_0 +
  2*foo$credit_proposal_0to5 +
  3*foo$credit_proposal_5to10 +
  4*foo$credit_proposal_10to20 +
  5*foo$credit_proposal_20up +
  6*foo$NA_credit_proposal

# NA capital
foo$capital[which(is.na(foo$capital) == TRUE)] <- 9999999

# capital feature engineering
foo$capital_0 <- foo$capital == 0 & (is.na(foo$capital) == FALSE)
foo$capital_0to2 <- foo$capital > 0 & foo$capital < 200000 & (is.na(foo$capital) == FALSE)
foo$capital_2to5 <- foo$capital >= 200000 & foo$capital < 500000 & (is.na(foo$capital) == FALSE)
foo$capital_5to10 <- foo$capital >= 500000 & foo$capital < 1000000 & (is.na(foo$capital) == 
FALSE)
foo$capital_10to20 <- foo$capital >= 1000000 & foo$capital < 2000000 & (is.na(foo$capital) == 
FALSE)
foo$capital_20to50 <- foo$capital >= 2000000 & foo$capital < 5000000 & (is.na(foo$capital) == 
FALSE)
foo$capital_50up <- foo$capital >= 5000000 & (is.na(foo$capital) == FALSE)
foo$capital_transformed <-
  1*foo$capital_0 +
  2*foo$capital_0to2 +
  3*foo$capital_2to5 +
  4*foo$capital_5to10 +
  5*foo$capital_10to20 +
  6*foo$capital_20to50 +
  7*foo$capital_50up +
  8*foo$NA_capital

# worker feature engineering
# remove outlier in the control group (10 million workers)
foo <- foo[-which(foo$worker == max(foo$worker)),]

foo$worker_0 <- foo$worker == 0
foo$worker_1 <- foo$worker == 1
foo$worker_2 <- foo$worker == 2
foo$worker_3 <- foo$worker == 3
foo$worker_4 <- foo$worker == 4
foo$worker_5to9 <- foo$worker >=5 & foo$worker < 10
foo$worker_10to24 <- foo$worker >=10 & foo$worker < 25
foo$worker_25to99 <- foo$worker >=25 & foo$worker < 100
foo$worker_100up <- foo$worker >= 100

foo$worker_transformed <-
  1*foo$worker_0 +
  2*foo$worker_1 +
  3*foo$worker_2 +
  4*foo$worker_3 +
  5*foo$worker_4 +
  6*foo$worker_5to9 +
  7*foo$worker_10to24 +
  8*foo$worker_25to99 +
  9*foo$worker_100up


# Treatment Indicator
foo$treat <- foo$status == "Sudah"


foo_badan <- foo[which(foo$gender == "BADAN USAHA"), ]
foo_people <- foo[-which(foo$gender == "BADAN USAHA"), ]


##################################################################################
###################### This is where my code starts ##############################
##################################################################################

#Extracting only the first two digits of distric code

foo$district_code1 <- substr(foo$district_code, start = 1, stop = 2)
#converting to numeric
R_district_code1 <- as.numeric(foo$district_code1)

# Testing how many standard deviations are in a year
year <- foo$R_date_of_birth[1] + 365
test <- c(foo$R_date_of_birth[1], year)

sd(test)


# Replacing postal code by district code
X = cbind(foo$R_date_of_birth, foo$gender, foo$marital_status,
                foo$education, foo$occupation, R_district_code1,
                foo$worker, foo$capital, foo$credit_proposal,
                foo$worker_transformed, foo$capital_transformed, foo$credit_proposal_transformed,
                foo$missing_date_of_birth,
                foo$NA_postal_code,
                foo$NA_capital,
                foo$NA_credit_proposal)


Tr <- foo$treat

BalanceMat <- X


# Running genetic matching with the right calipers
genout <- GenMatch(Tr=Tr, X=X, BalanceMatrix=BalanceMat, estimand="ATT", M=1,
                   pop.size=10, max.generations=2, wait.generations=1,
                   caliper = c(258.094, 1e-16, 1e-16,
                               1e-16, 1e-16, 1e-16,
                               1e16, 1e16, 1e16,
                               1e-16, 1e-16, 1e-16,
                               1e-16,
                               1e-16,
                               1e-16,
                               1e-16))

# Matching with the covariates found
mout <- Match(Tr=Tr, X=X, estimand="ATT", M=1,
              caliper = c(258.094, 1e-16, 1e-16,
                          1e-16, 1e-16, 1e-16,
                          1e16, 1e16, 1e16,
                          1e-16, 1e-16, 1e-16,
                          1e-16,
                          1e-16,
                          1e-16,
                          1e-16), 
              Weight.matrix = genout)

summary(mout)


# Checking balance
mb <- MatchBalance(foo$treat~
                     foo$R_date_of_birth + foo$gender + foo$marital_status +
                     foo$education + foo$occupation + R_district_code1 +
                     foo$worker + foo$capital + foo$credit_proposal +
                     foo$worker_transformed + foo$capital_transformed + 
                     foo$credit_proposal_transformed +
                     foo$missing_date_of_birth +
                     foo$NA_postal_code +
                     foo$NA_capital +
                     foo$NA_credit_proposal,
                   match.out=mout, nboots=500)
